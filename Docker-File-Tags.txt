FROM - To copy an Image present in Docker Hub
    "FROM gcc:4.9"

ENV - To set environment variables in docker contaier
    "MONGO_DB_USER_NAME=admin"

ENTRYPOINT - The ENTRYPOINT instruction make your container run as an executable. ENTRYPOINT can be configured in two forms:
    Exec Form : ENTRYPOINT [“executable”, “param1”, “param2”]
    Shell Form : ENTRYPOINT command param1 param2
    If an image has an ENTRYPOINT if you pass an argument it, while running container it wont override the existing 
    entrypoint, it will append what you passed with the entrypoint.To override the existing ENTRYPOINT you should user
    –entrypoint flag when running container.

CMD - CMD is an entry point commands unlike RUN CMD is used only once. So using this command means telling docker file that run 
    this command as an entrypoint to trigger container operation.
    CMD ["./myapp"]

RUN - Run any Linux Command before container start to do all sorts of preprocessing via commands required for container to 
    run. RUN g++ main.cpp -o myapp || The RUN instruction execute command on top of the below layer and create a new layer.
    RUN instruction can be wrote in two forms:
    RUN (shell form)
    RUN [“executable”, “param1”, “param2”] (exec form)

COPY - Copy setup files inside image from host while building it. COPY takes in a src and destination. It only lets you copy
    in a local file or directory from your host (the machine building the Docker image) into the Docker image itself.
    COPY . /app

Add - COPY and ADD are both Dockerfile instructions that serve similar purposes. They let you copy files from a specific location 
    into a Docker image. ADD lets you supports 2 other sources. First, you can use a URL instead of a local file / directory.
    Secondly, you can extract a tar file from the source directly into the destination.

EXPOSE

FROM

LABEL

STOPSIGNAL

USER

VOLUME

WORKDIR - The WORKDIR directive in Dockerfile defines the working directory for the rest of the instructions in the 
    Dockerfile. The WORKDIR instruction wont create a new layer in the image but will add metadata to the image config.
    If the WORKDIR doesn’t exist, it will be created even if it’s not used in any subsequent Dockerfile instruction. 
    you can have multiple WORKDIR in same Dockerfile. If a relative path is provided, it will be relative to the previous
    WORKDIR instruction.
    If no WORKDIR is specified in the Dockerfile then the default path is /. The WORKDIR instruction can resolve 
    environment variables previously set in Dockerfile using ENV.